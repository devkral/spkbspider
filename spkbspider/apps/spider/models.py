"""
User Components and Protections
namespace: spiderucs

"""


from django.db import models
from django.conf import settings
from django.utils.translation import pgettext_lazy

from jsonfield import JSONField
import swapper

from .signals import test_success
from .protections import installed_protections


import logging

logger = logging.getLogger(__name__)

class AbstractUserComponent(models.Model):
    id = models.BigAutoField(primary_key=True, editable=False)
    name = models.SlugField(max_length=50, null=False)
    user = models.ForeignKey(settings.AUTH_USER_MODEL, editable=False)
    #data for requester (NOT FOR PROTECTION)
    data = JSONField(default={}, null=False)
    created = models.DateTimeField(auto_now_add=True, editable=False)
    modified = models.DateTimeField(auto_now=True, editable=False)
    brokers = None
    publickeys = None
    # should be used for retrieving active protections, related_name
    assigned = None
    protections = models.ManyToManyField("spiderucs.Protection", through="spiderucs.AssignedProtection")
    class Meta:
        abstract = True
        unique_together = [("user", "name"),]
        indexes = [
            models.Index(fields=['user', 'name']),
        ]

    def __str__(self):
        return self.name

    """def auth_test(self, request):
        # with deny and protections
        if self.assigned.filter(code="deny", active=True).exists() and len(self.assigned) > 1:
            for p in self.assigned.filter(active=True).exclude(code="deny"):
                if not p.test(request):
                    return False
            for rec, error in test_success.send_robust(sender=self.__class__, name=self.name, code="deny"):
                logger.error(error)
            return True
        else:
            # normally just one must be fullfilled (or)
            for p in self.assigned.filter(active=True):
                if p.test(request):
                    for rec, error in test_success.send_robust(sender=self.__class__, name=self.name, code=p.code):
                        logger.error(error)
                    return True
            return False"""
    def settings(self, request):
        pall = []
        for p in self.assigned.all():
            pall.append(p.settings(request))
        return pall
    def get_absolute_url(self):
        return reverse("spiderucs:uc-view", kwargs={"user":self.user.username, "name":self.name})


class UserComponent(AbstractUserComponent):
    class Meta:
        swappable = swapper.swappable_setting('spiderucs', 'UserComponent')



class ProtectionManager(models.Manager):
    def invalid(self):
        return self.get_queryset().exclude(code__in=installed_protections)

    def valid(self):
        return self.get_queryset().filter(code__in=installed_protections)


# don't confuse with Protection objects used with add_protection
# this is pure DB
class Protection(models.Model):
    objects = ProtectionManager()
    # autogenerated, no choices required
    code = models.SlugField(max_length=10, primary_key=True)
    can_render = models.BooleanField(default=False)

    def __str__(self):
        return str(installed_protections[self.code])

class AssignedProtection(models.Model):
    id = models.BigAutoField(primary_key=True)
    protection = models.ForeignKey("spiderucs.Protection", on_delete=models.CASCADE, related_name="assigned", limit_choices_to={"code__in": installed_protections}, editable=False)
    usercomponent = models.ForeignKey(swapper.get_model_name('spiderucs', 'UserComponent'), on_delete=models.CASCADE, editable=False)
    # data for protection
    protectiondata = JSONField(default={}, null=False)
    created = models.DateTimeField(auto_now_add=True, editable=False)
    modified = models.DateTimeField(auto_now=True, editable=False)
    active = models.BooleanField(default=True)
    class Meta:
        unique_together = [("protection", "usercomponent"),]

    #def get_absolute_url(self):
    #    return reverse("spiderucs:protection", kwargs={"user":self.usercomponent.user.username, "ucid":self.usercomponent.id, "pname": self.protection.code})

    def auth_test(self):
        return installed_protections[self.protection.code].auth_test(request=request, user=usercomponent.user, data=self.protectiondata, obj=self)

    def auth_render(self, request):
        return installed_protections[self.protection.code].auth_render(request=request, user=usercomponent.user, data=self.protectiondata, obj=self)

    def settings(self, request):
        if request.method == "GET":
            return installed_protections[self.protection.code](self.protectiondata, prefix=self.protection.code)
        else:
            prot = installed_protections[self.protection.code](request.POST, prefix=self.protection.code)
            if prot.is_valid():
                self.active = prot.cleaned_data.pop("active")
                self.protectiondata = prot.cleaned_data
                self.save()
            return prot

    def clean(self):
        installed_protections[self.protection.code].clean(self)
